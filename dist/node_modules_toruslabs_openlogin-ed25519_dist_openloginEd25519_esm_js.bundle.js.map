{"version":3,"file":"node_modules_toruslabs_openlogin-ed25519_dist_openloginEd25519_esm_js.bundle.js","mappings":";;;;;;;;;;;;;;;AAA2C;;AAE3C,UAAU,yEAAa;AACvB;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,QAAQ;;AAE1B;AACA;AACA;AACA;AACA;;AAEyB;AACzB;;;;;;;;;;;ACjCA","sources":["webpack://cosmos-nft/./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js","webpack://cosmos-nft/ignored|C:\\Users\\santiago.viana\\cosmos\\node_modules\\@toruslabs\\tweetnacl-js|crypto"],"sourcesContent":["import nacl from '@toruslabs/tweetnacl-js';\n\nconst l = nacl.lowlevel;\nfunction getED25519Key(privateKey) {\n  let privKey;\n\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  } // Implementation copied from tweetnacl\n\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return {\n    sk: Buffer.from(sk),\n    pk: Buffer.from(pk)\n  };\n}\n\nexport { getED25519Key };\n//# sourceMappingURL=openloginEd25519.esm.js.map\n","/* (ignored) */"],"names":[],"sourceRoot":""}